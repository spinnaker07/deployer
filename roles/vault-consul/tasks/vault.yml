---
- name: Check prerequisites
  fail:
    msg: "You MUST provide a vault configuration through the variable vault_server_config_path"
  when: vault_server_config_path is not defined and vault_server_mode != 'development'

- name: Create vault user
  user:
    name: "{{vault_user}}"
    password: "{{vault_user_password}}"

- name: Create vault directory
  file:
    path: "{{vault_dir}}"
    state: directory
    owner: "{{vault_user}}"
    group: "{{vault_user}}"

- name: Check vault version
  shell: "vault --version 2>&1 | grep {{vault_version}}"
  failed_when: false
  changed_when: false
  register: vault_versions_match

- name: Download vault
  get_url:
    url: https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{vault_version}}_linux_amd64.zip
    dest: /tmp/vault-{{vault_version}}.zip
  when: "'64' in ansible_architecture and 'Linux' == ansible_system and vault_versions_match.rc != 0"

- name: Unarchive vault archive
  unarchive:
    src: /tmp/vault-{{vault_version}}.zip
    dest: "{{vault_dir}}"
    copy: no
  when: vault_versions_match.rc != 0

- name: Make vault_user vault directory owner
  file:
    path: "{{vault_dir}}"
    state: directory
    owner: "{{vault_user}}"
    group: "{{vault_user}}"
    recurse: yes

- name: Adding vault command to user path
  file:
    src: "{{vault_dir}}/vault"
    dest: /usr/bin/vault
    state: link

- name: Create vault log directory
  file:
    path: "{{vault_server_log_dir}}"
    state: directory
    owner: "{{vault_user}}"
    group: "{{vault_user}}"
  when: vault_server
  register: vault_log_task

- name: Create vault conf directory
  file:
    path: "{{vault_server_config_path}}"
    state: directory
    owner: "{{vault_user}}"
    group: "{{vault_user}}"
  when: vault_server
  register: vault_conf_task

- name: Create vault conf
  template:
    src: "config.hcl.j2"
    dest: "{{vault_server_config_path}}/config.hcl"
    owner: "{{vault_user}}"
    group: "{{vault_user}}"
    force: true
  when: vault_server
  register: vault_config_task

- include: service.yml

- name: Vault API reachable?
  wait_for:
    host: "{{vault_address}}"
    port: "{{ vault_port }}"
    delay: "10"

- name: Vault init
  shell: VAULT_ADDR="{{vault_url}}" vault init
  register: vault_init 
  ignore_errors: True
  tags: init

- local_action: copy content="{{ vault_init }}" dest="{{vault_init_logs}}"
  tags: init

- name: check output
  fail: msg="Vault is already initialized "
  when: "'already initialized' in {{vault_init.stderr}}"

- debug:
   msg: "{{vault_init.stdout}}"
  tags: init

